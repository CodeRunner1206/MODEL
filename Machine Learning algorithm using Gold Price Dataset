{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/CodeRunner1206/MODEL/blob/main/Machine%20Learning%20algorithm%20using%20Gold%20Price%20Dataset\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IWIbb3wfvEHK"
      },
      "outputs": [],
      "source": [
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "\n",
        "# Input data files are available in the read-only \"../input/\" directory\n",
        "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
        "\n",
        "import os\n",
        "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
        "    for filename in filenames:\n",
        "        print(os.path.join(dirname, filename))\n",
        "\n",
        "import sys\n",
        "import warnings\n",
        "\n",
        "if not sys.warnoptions:\n",
        "    warnings.simplefilter(\"ignore\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv('/content/gld_price_data.csv')\n",
        "gold_data = data[['Date','GLD']]\n",
        "gold_data.columns = ['date','gold_price']\n",
        "gold_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "rX1eNF1tvV7E",
        "outputId": "1034edd2-fc63-48bd-8eb4-1eb4a91f13fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       date  gold_price\n",
              "0  1/2/2008   84.860001\n",
              "1  1/3/2008   85.570000\n",
              "2  1/4/2008   85.129997\n",
              "3  1/7/2008   84.769997\n",
              "4  1/8/2008   86.779999"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-52b98d77-0970-4b5d-b39a-0fa487a06422\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>gold_price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1/2/2008</td>\n",
              "      <td>84.860001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1/3/2008</td>\n",
              "      <td>85.570000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1/4/2008</td>\n",
              "      <td>85.129997</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1/7/2008</td>\n",
              "      <td>84.769997</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1/8/2008</td>\n",
              "      <td>86.779999</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-52b98d77-0970-4b5d-b39a-0fa487a06422')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-55178db7-9327-47d6-bcb4-7ae9b34fe879\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-55178db7-9327-47d6-bcb4-7ae9b34fe879')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-55178db7-9327-47d6-bcb4-7ae9b34fe879 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-52b98d77-0970-4b5d-b39a-0fa487a06422 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-52b98d77-0970-4b5d-b39a-0fa487a06422');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gold_data.index = pd.to_datetime(gold_data['date'])\n",
        "gold_data.drop('date',axis=1,inplace = True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aVBW-ttPvd-a",
        "outputId": "c0966bfe-111a-4dd1-f2d6-907dce49a2de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-3-6345663c9f25>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  gold_data.drop('date',axis=1,inplace = True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gold_data['2018-01']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 794
        },
        "id": "XoPL_5wzvjR4",
        "outputId": "4c3269bc-ecc5-4cfa-a064-3d3151e89b72"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-4-9840746dbd0f>:1: FutureWarning: Indexing a DataFrame with a datetimelike index using a single string to slice the rows, like `frame[string]`, is deprecated and will be removed in a future version. Use `frame.loc[string]` instead.\n",
            "  gold_data['2018-01']\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            gold_price\n",
              "date                  \n",
              "2018-01-02  125.150002\n",
              "2018-01-03  124.820000\n",
              "2018-01-04  125.459999\n",
              "2018-01-05  125.330002\n",
              "2018-01-08  125.309998\n",
              "2018-01-09  124.730003\n",
              "2018-01-10  125.029999\n",
              "2018-01-11  125.440002\n",
              "2018-01-12  126.959999\n",
              "2018-01-16  127.169998\n",
              "2018-01-17  126.139999\n",
              "2018-01-18  125.860001\n",
              "2018-01-19  126.419998\n",
              "2018-01-22  126.650002\n",
              "2018-01-23  127.279999\n",
              "2018-01-24  128.830002\n",
              "2018-01-25  127.970001\n",
              "2018-01-26  128.070007\n",
              "2018-01-29  127.349998\n",
              "2018-01-30  126.800003\n",
              "2018-01-31  127.650002"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-65020d93-225a-4049-a8d3-04ac441eeb9a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gold_price</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2018-01-02</th>\n",
              "      <td>125.150002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-03</th>\n",
              "      <td>124.820000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-04</th>\n",
              "      <td>125.459999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>125.330002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-08</th>\n",
              "      <td>125.309998</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-09</th>\n",
              "      <td>124.730003</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-10</th>\n",
              "      <td>125.029999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-11</th>\n",
              "      <td>125.440002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-12</th>\n",
              "      <td>126.959999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-16</th>\n",
              "      <td>127.169998</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-17</th>\n",
              "      <td>126.139999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-18</th>\n",
              "      <td>125.860001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-19</th>\n",
              "      <td>126.419998</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-22</th>\n",
              "      <td>126.650002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-23</th>\n",
              "      <td>127.279999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-24</th>\n",
              "      <td>128.830002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-25</th>\n",
              "      <td>127.970001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-26</th>\n",
              "      <td>128.070007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-29</th>\n",
              "      <td>127.349998</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-30</th>\n",
              "      <td>126.800003</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-31</th>\n",
              "      <td>127.650002</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-65020d93-225a-4049-a8d3-04ac441eeb9a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-f2bf6374-eadc-4396-b276-ba8b22c0a283\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f2bf6374-eadc-4396-b276-ba8b22c0a283')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-f2bf6374-eadc-4396-b276-ba8b22c0a283 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-65020d93-225a-4049-a8d3-04ac441eeb9a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-65020d93-225a-4049-a8d3-04ac441eeb9a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(gold_data)\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Price [USD]')\n",
        "plt.title('Gold Prices')\n",
        "plt.grid()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "p3sBMcsPvmKE",
        "outputId": "22a6b20f-8806-4d81-dcbe-be81bdced9ce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(gold_data['gold_price'].autocorr())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F7BlQZjbvpEj",
        "outputId": "201de8d3-00c2-42d0-dc2d-29b73431fa38"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9978137571660719\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.graphics.tsaplots import plot_acf\n",
        "plot_acf(gold_data['gold_price'],lags=20,alpha=0.5)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "95xUYUI6vsRR",
        "outputId": "a0c4202d-a1bb-410b-eb1b-5bae5211767c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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XPTzA2bGOTiASa1fv16HDx/WqlWrtGrVqlrrV6xYoSFDhrjNBtTUmDM83lRzVuVC65xOpyTpqaeeUmJiosdtunTp4rHd4XDoxz/+sU6cOKFp06apW7duatWqlQ4ePKixY8e6anubv7+/x3bDw8ncwNWMgAOY1IoVK9SmTRvXFT01vf3221q7dq0WL17smgE4/wolT4c86gpD7du31z//+U+VlJS4zeLs2LHDtV6SOnfuLKfTqe+//169e/eus5Yk5eXluR22qaysVH5+vhISEurY4wurrhcQEHDRdf71r3/p3//+t5YtW6YxY8a42jMzM2v1ret1Ol9kZKSCg4OVl5dXa92OHTvk5+en2NjYixongDM4RAWY0MmTJ/X222/rnnvu0YMPPlhrSUlJUUlJid577z21b99e/v7++uSTT9xqvPrqq7XqtmrVSlLtMHT33XfL4XDolVdecWt/6aWXZLFYNHToUEnS8OHD5efnpzlz5tSa8aiegUhISFBgYKAWLlzoNivxxhtvqLi4WMOGDbu0F0VSmzZtNGjQIL322ms6fPhwrfX1XW5dPXNSc0yGYei///u/a/Wt63XyVHPIkCF69913tWfPHld7YWGhVq5cqYEDByokJKTeGgA8YwYHMKH33ntPJSUluu+++zyuv/XWW103/Rs5cqQeeughvfzyy7JYLOrcubM++OADj+ei9O3bV5L0xBNPKDExUf7+/ho1apTuvfde3XXXXfrNb36jPXv2qFevXlq3bp3effddTZ48WZ07d5Z05vDPb37zG82dO1e33367fvKTn8hqtWrLli2KiYlRenq6IiMjlZaWptmzZyspKUn33Xef8vLy9Oqrr+qWW27RI488clmvzaJFizRw4ED16NFDycnJ6tSpkwoLC5WTk6MDBw7o66+/9rhdt27d1LlzZz311FM6ePCgQkJC9Pe//93juS91vU6ePPfcc8rMzNTAgQP12GOPqUWLFnrttddUUVGh559//rL2FbiqNd0FXAC85d577zWCgoKMsrKyOvuMHTvWCAgIMI4dO2YcPXrUGDFihBEcHGyEh4cbv/jFL4xvv/221mXip0+fNh5//HEjMjLSsFgsbpdCl5SUGE8++aQRExNjBAQEGDfccIMxf/58t0uaqy1ZssTo06ePYbVajfDwcOPOO+90Xcpe7ZVXXjG6detmBAQEGFFR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Ky0tTcXFxa5l//79lz0+AADQfF30DM6UKVM0duzYevt06tRJNptNR44ccWs/ffq0Tpw40aBzZ/72t7+pvLxcY8aMuWDfuLg4zZ07VxUVFbJarbXWW61Wj+0AAMCcLjrgREZGKjIy8oL94uPjVVRUpNzcXPXt21eStH79ejmdTsXFxV1w+zfeeEP33Xdfg55r27ZtCg8PJ8QAAABJXjwH58Ybb1RSUpKSk5O1ePFiVVVVKSUlRaNGjXJdQXXw4EENHjxYy5cvV//+/V3b7tq1S5988ok++uijWnXff/99FRYW6tZbb1VQUJAyMzP1u9/9Tk899ZS3dgUAAPgYr94HZ8WKFUpJSdHgwYPl5+enESNGaOHCha71VVVVysvLU3l5udt2S5Ys0fXXX68hQ4bUqhkQEKBFixbpySeflGEY6tKli1588UUlJyd7c1cAAIAPsRj1XV9tUna7XaGhoSouLlZISEhTDwcAADTAxXx+811UAADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdAg4AADAdLwWcH77299qwIABCg4OVlhYWIO2MQxDM2fOVHR0tFq2bKmEhATt3LnTrc+JEyc0evRohYSEKCwsTOPHj1dpaakX9gAAAPgqrwWcyspKPfTQQ5o4cWKDt3n++ee1cOFCLV68WJs2bVKrVq2UmJioU6dOufqMHj1a3333nTIzM/XBBx/ok08+0YQJE7yxCwAAwEdZDMMwvPkES5cu1eTJk1VUVFRvP8MwFBMToylTpuipp56SJBUXFysqKkpLly7VqFGjtH37dnXv3l1btmxRv379JEkZGRm6++67deDAAcXExDRoTHa7XaGhoSouLlZISMhl7R8AALgyLubzu8UVGtMF5efnq6CgQAkJCa620NBQxcXFKScnR6NGjVJOTo7CwsJc4UaSEhIS5Ofnp02bNumBBx7wWLuiokIVFRWux8XFxZLOvFAAAMA3VH9uN2RuptkEnIKCAklSVFSUW3tUVJRrXUFBgdq0aeO2vkWLFoqIiHD18SQ9PV2zZ8+u1R4bG3u5wwYAAFdYSUmJQkND6+1zUQFn+vTpmjdvXr19tm/frm7dul1MWa9LS0tTamqq67HT6dSJEyd03XXXyWKxNOpz2e12xcbGav/+/Rz+8iH83XwTfzffxN/NNzWHv5thGCopKWnQKSkXFXCmTJmisWPH1tunU6dOF1PSxWazSZIKCwsVHR3tai8sLFTv3r1dfY4cOeK23enTp3XixAnX9p5YrVZZrVa3toZe2XWpQkJCeOP6IP5uvom/m2/i7+abmvrvdqGZm2oXFXAiIyMVGRl5SQO6kI4dO8pmsykrK8sVaOx2uzZt2uS6Eis+Pl5FRUXKzc1V3759JUnr16+X0+lUXFycV8YFAAB8j9cuE9+3b5+2bdumffv2yeFwaNu2bdq2bZvbPWu6deumtWvXSpIsFosmT56s5557Tu+9957+9a9/acyYMYqJidHw4cMlSTfeeKOSkpKUnJyszZs367PPPlNKSopGjRrV4CuoAACA+XntJOOZM2dq2bJlrsd9+vSRJG3YsEGDBg2SJOXl5bmuaJKkqVOnqqysTBMmTFBRUZEGDhyojIwMBQUFufqsWLFCKSkpGjx4sPz8/DRixAgtXLjQW7tx0axWq2bNmlXrkBiaN/5uvom/m2/i7+abfO3v5vX74AAAAFxpfBcVAAAwHQIOAAAwHQIOAAAwHQIOAAAwHQIOAAAwHQJOI1q0aJE6dOigoKAgxcXFafPmzU09JNTj2WeflcVicVua29eMQPrkk0907733KiYmRhaLRe+8847besMwNHPmTEVHR6tly5ZKSEjQzp07m2awcLnQ323s2LG13n9JSUlNM1i4pKen65ZbbtG1116rNm3aaPjw4crLy3Prc+rUKU2aNEnXXXedrrnmGo0YMUKFhYVNNOK6EXAayerVq5WamqpZs2Zp69at6tWrlxITE2t9tQSal5tuukmHDx92LZ9++mlTDwnnKSsrU69evbRo0SKP659//nktXLhQixcv1qZNm9SqVSslJibq1KlTV3ikqOlCfzdJSkpKcnv//fWvf72CI4QnGzdu1KRJk/TFF18oMzNTVVVVGjJkiMrKylx9nnzySb3//vtas2aNNm7cqEOHDuknP/lJE466DgYaRf/+/Y1Jkya5HjscDiMmJsZIT09vwlGhPrNmzTJ69erV1MPARZBkrF271vXY6XQaNpvNmD9/vqutqKjIsFqtxl//+tcmGCE8Of/vZhiG8eijjxr3339/k4wHDXfkyBFDkrFx40bDMM68vwICAow1a9a4+mzfvt2QZOTk5DTVMD1iBqcRVFZWKjc3VwkJCa42Pz8/JSQkKCcnpwlHhgvZuXOnYmJi1KlTJ40ePVr79u1r6iHhIuTn56ugoMDtvRcaGqq4uDjeez4gOztbbdq0UdeuXTVx4kQdP368qYeE81R/20BERIQkKTc3V1VVVW7vuW7duqldu3bN7j1HwGkEx44dk8PhUFRUlFt7VFSUCgoKmmhUuJC4uDgtXbpUGRkZ+uMf/6j8/HzdfvvtKikpaeqhoYGq31+893xPUlKSli9frqysLM2bN08bN27U0KFD5XA4mnpoOMvpdGry5Mm67bbbdPPNN0s6854LDAxUWFiYW9/m+J7z2ndRAc3d0KFDXb/37NlTcXFxat++vd566y2NHz++CUcGmN+oUaNcv/fo0UM9e/ZU586dlZ2drcGDBzfhyFBt0qRJ+vbbb3323ERmcBpB69at5e/vX+ss8sLCQtlstiYaFS5WWFiY/uM//kO7du1q6qGggarfX7z3fF+nTp3UunVr3n/NREpKij744ANt2LBB119/vavdZrOpsrJSRUVFbv2b43uOgNMIAgMD1bdvX2VlZbnanE6nsrKyFB8f34Qjw8UoLS3V7t27FR0d3dRDQQN17NhRNpvN7b1nt9u1adMm3ns+5sCBAzp+/DjvvyZmGIZSUlK0du1arV+/Xh07dnRb37dvXwUEBLi95/Ly8rRv375m957jEFUjSU1N1aOPPqp+/fqpf//+WrBggcrKyjRu3LimHhrq8NRTT+nee+9V+/btdejQIc2aNUv+/v56+OGHm3poqKG0tNTt/+rz8/O1bds2RUREqF27dpo8ebKee+453XDDDerYsaNmzJihmJgYDR8+vOkGjXr/bhEREZo9e7ZGjBghm82m3bt3a+rUqerSpYsSExObcNSYNGmSVq5cqXfffVfXXnut67ya0NBQtWzZUqGhoRo/frxSU1MVERGhkJAQPf7444qPj9ett97axKM/T1NfxmUmL7/8stGuXTsjMDDQ6N+/v/HFF1809ZBQj5EjRxrR0dFGYGCg0bZtW2PkyJHGrl27mnpYOM+GDRsMSbWWRx991DCMM5eKz5gxw4iKijKsVqsxePBgIy8vr2kHjXr/buXl5caQIUOMyMhIIyAgwGjfvr2RnJxsFBQUNPWwr3qe/maSjDfffNPV5+TJk8Zjjz1mhIeHG8HBwcYDDzxgHD58uOkGXQeLYRjGlY9VAAAA3sM5OAAAwHQIOAAAwHQIOAAAwHQIOAAAwHQIOAAAwHQIOAAAwHQIOAAAwHQIOAAAwHQIOAAAwHQIOAAAwHQIOAAAwHT+PwcGeEesGO3cAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.tsa.stattools import adfuller\n",
        "results = adfuller(gold_data['gold_price'])\n",
        "print('The p-value of the test on prices is: ' + str(results[1]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rGboK59fvuyv",
        "outputId": "5e49803c-b74d-440b-aeca-72d4acfd74f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The p-value of the test on prices is: 0.4733141978661499\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.tsa.stattools import adfuller\n",
        "results = adfuller(gold_data.pct_change().dropna())\n",
        "print('The p-value of the test on prices is: ' + str(results[1]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hWXR2qAzvxss",
        "outputId": "31ce7f77-18f1-45dc-b6c9-407fecd2849c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The p-value of the test on prices is: 6.061950919706838e-20\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Gold price databse for past decade"
      ],
      "metadata": {
        "id": "Pk8UBgdXHdBj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#here we take diff() to make gold data stationary.\n",
        "diff_gold_data = gold_data.diff().dropna()\n",
        "diff_gold_data.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "bdJYbkxNv0qc",
        "outputId": "2b160c15-1297-4c31-b631-4a2b3f71c373"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='date'>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "from statsmodels.tsa.arima_model import ARMA\n"
      ],
      "metadata": {
        "id": "G-6DIeOlv30i"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = sm.tsa.arima.ARIMA(gold_data, order=(1,1,2))\n",
        "result = model.fit()\n",
        "print(result.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PBYej284v6fG",
        "outputId": "ac9cac3b-0875-4be3-ee97-ecc11a55e02d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                               SARIMAX Results                                \n",
            "==============================================================================\n",
            "Dep. Variable:             gold_price   No. Observations:                 2290\n",
            "Model:                 ARIMA(1, 1, 2)   Log Likelihood               -4228.424\n",
            "Date:                Fri, 11 Aug 2023   AIC                           8464.848\n",
            "Time:                        10:21:34   BIC                           8487.791\n",
            "Sample:                             0   HQIC                          8473.215\n",
            "                               - 2290                                         \n",
            "Covariance Type:                  opg                                         \n",
            "==============================================================================\n",
            "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "ar.L1         -0.9872      0.010    -95.966      0.000      -1.007      -0.967\n",
            "ma.L1          0.9530      0.020     48.374      0.000       0.914       0.992\n",
            "ma.L2         -0.0228      0.016     -1.401      0.161      -0.055       0.009\n",
            "sigma2         2.3553      0.023    100.677      0.000       2.309       2.401\n",
            "===================================================================================\n",
            "Ljung-Box (L1) (Q):                   0.00   Jarque-Bera (JB):             24736.60\n",
            "Prob(Q):                              0.99   Prob(JB):                         0.00\n",
            "Heteroskedasticity (H):               0.49   Skew:                            -1.24\n",
            "Prob(H) (two-sided):                  0.00   Kurtosis:                        18.91\n",
            "===================================================================================\n",
            "\n",
            "Warnings:\n",
            "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.graphics.tsaplots import plot_pacf\n",
        "plot_pacf(gold_data['gold_price'],lags=20,alpha=0.10)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "ogrMUaKl0kbE",
        "outputId": "3649de12-e659-4aad-d15b-21a9a72eea20"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/graphics/tsaplots.py:348: FutureWarning: The default method 'yw' can produce PACF values outside of the [-1,1] interval. After 0.13, the default will change tounadjusted Yule-Walker ('ywm'). You can use this method now by setting method='ywm'.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "parameters = [i for i in range(1,6)]\n",
        "bic_values = []\n",
        "for p in parameters:\n",
        "    model = sm.tsa.arima.ARIMA(gold_data, order=(p,1,2))\n",
        "    result = model.fit()\n",
        "    bic_values.append(result.bic)\n",
        "plt.plot(bic_values)\n",
        "plt.xticks(parameters)\n",
        "plt.xlabel('No. of Parameter')\n",
        "plt.ylabel('BIC value')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "FEbNG3ew0rFu",
        "outputId": "db267f5d-913e-4efe-8ad8-f01eea278f09"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n",
            "  warn('Non-stationary starting autoregressive parameters'\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n",
            "  warn('Non-invertible starting MA parameters found.'\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n",
            "  warn('Non-stationary starting autoregressive parameters'\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n",
            "  warn('Non-invertible starting MA parameters found.'\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:604: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
            "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from statsmodels.tsa.arima.model import ARIMA\n",
        "\n",
        "# Instantiate the ARIMA model with order (1,0,0) using the gold_data time series\n",
        "model = ARIMA(gold_data, order=(1,0,0))\n",
        "\n",
        "# Fit the model to the data and store the results in the result variable\n",
        "result = model.fit()\n",
        "\n",
        "# Define the forecast start and end points\n",
        "forecast_start = 228\n",
        "forecast_end = 230\n",
        "\n",
        "# Generate the forecast for the specified range of data points\n",
        "forecast = result.predict(start=forecast_start, end=forecast_end)\n",
        "\n",
        "# Plot the original time series and the forecast\n",
        "fig, ax = plt.subplots()\n",
        "ax.plot(gold_data, label='Actual')\n",
        "ax.plot(forecast, label='Forecast')\n",
        "ax.set_xticks(range(len(gold_data)))\n",
        "ax.set_xticklabels(gold_data.index, rotation=45)\n",
        "ax.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 653
        },
        "id": "D6HjgtFV6EA_",
        "outputId": "7ba00248-af18-4779-96b7-3af96b09f358"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
            "  self._init_dates(dates, freq)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "dMlih2bA4cTC"
      }
    }
  ]
}